package com.carbon_trading.fisco;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Carbon_trading extends Contract {
    public static final String[] BINARY_ARRAY = {"","031916815260200191505b50858103825286818151815260200191508051906020019080838360005b83811015610eab578082015181840152602081019050610e90565b50505050905090810190601f168015610ed85780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a1838383839b509b509b509b5050505050505050509193509193565b6000606060008060606000610f19611726565b93508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f7f57600080fd5b505af1158015610f93573d6000803e3d6000fd5b505050506040513d6020811015610fa957600080fd5b81019080805190602001909291905050509250600080815460010191905081905550610fd6600054611815565b91508273ffffffffffffffffffffffffffffffffffffffff1663e942b516836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260028152602001807f6964000000000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561109857808201518184015260208101905061107d565b50505050905090810190601f1680156110c55780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156110e557600080fd5b505af11580156110f9573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156111bd5780820151818401526020810190506111a2565b50505050905090810190601f1680156111ea5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561120a57600080fd5b505af115801561121e573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f747970655f696400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156112e25780820151818401526020810190506112c7565b50505050905090810190601f16801561130f5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561132f57600080fd5b505af1158015611343573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f636f6e73756d6500000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156114075780820151818401526020810190506113ec565b50505050905090810190601f1680156114345780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561145457600080fd5b505af1158015611468573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f6d61705f69640000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561152c578082015181840152602081019050611511565b50505050905090810190601f1680156115595780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561157957600080fd5b505af115801561158d573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff166331afac3683856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561164c578082015181840152602081019050611631565b50505050905090810190601f1680156116795780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561169957600080fd5b505af11580156116ad573d6000803e3d6000fd5b505050506040513d60208110156116c357600080fd5b810190808051906020019092919050505090507fee3956ccc9ce9c8990a41990033ea04e3b787ab4d6b39a8ca929950811f1fa27816040518082815260200191505060405180910390a18082955095505050505094509492505050565b60005481565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600e8152602001807f636172626f6e5f74726164696e67000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156117d057600080fd5b505af11580156117e4573d6000803e3d6000fd5b505050506040513d60208110156117fa57600080fd5b81019080805190602001909291905050509050809250505090565b60606000806060600080861415611863576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509450611963565b8593505b60008414151561188d578280600101935050600a8481151561188557fe5b049350611867565b826040519080825280601f01601f1916602001820160405280156118c05781602001602082028038833980820191505090505b5091506001830390505b60008614151561195f57600a868115156118e057fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561191b57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681151561195757fe5b0495506118ca565b8194505b505050509190505600a165627a7a72305820dedb8d06a10e56dc1772dba7e5b7bb5d1a8dbf63eef2bc33a6d4a2d876a2e5000029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040526000805534801561001457600080fd5b5061002c610031640100000000026401000000009004565b610189565b600061100190508073ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001806020018481038452600e8152602001807f636172626f6e5f74726164696e67000000000000000000000000000000000000815250602001848103835260028152602001807f69640000000000000000000000000000000000000000000000000000000000008152506020018481038252601e8152602001807f6163636f756e742c747970655f69642c636f6e73756d652c6d61705f696400008152506020019350505050602060405180830381600087803b15801561014a57600080fd5b505af115801561015e573d6000803e3d6000fd5b505050506040513d602081101561017457600080fd5b81019080805190602001909291905050505050565b611998806101986000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633ec9c8771461005c57806344cc085914610282578063f46fe9541461043d575b600080fd5b34801561006857600080fd5b506100c3600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610468565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b8381101561010f5780820151818401526020810190506100f4565b50505050905090810190601f16801561013c5780820380516001836020036101000a031916815260200191505b50858103845288818151815260200191508051906020019080838360005b8381101561017557808201518184015260208101905061015a565b50505050905090810190601f1680156101a25780820380516001836020036101000a031916815260200191505b50858103835287818151815260200191508051906020019080838360005b838110156101db5780820151818401526020810190506101c0565b50505050905090810190601f1680156102085780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b83811015610241578082015181840152602081019050610226565b50505050905090810190601f16801561026e5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561028e57600080fd5b506103bb600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610f06565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156104015780820151818401526020810190506103e6565b50505050905090810190601f16801561042e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561044957600080fd5b50610452611720565b6040518082815260200191505060405180910390f35b606080606080600080600080606080606080610482611726565b97508773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156104e857600080fd5b505af11580156104fc573d6000803e3d6000fd5b505050506040513d602081101561051257600080fd5b810190808051906020019092919050505096508673ffffffffffffffffffffffffffffffffffffffff1663ae763db58e6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260028152602001807f6964000000000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156105e55780820151818401526020810190506105ca565b50505050905090810190601f1680156106125780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561063257600080fd5b505af1158015610646573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff1663d8ac59578e896040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156107055780820151818401526020810190506106ea565b50505050905090810190601f1680156107325780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561075257600080fd5b505af1158015610766573d6000803e3d6000fd5b505050506040513d602081101561077c57600080fd5b810190808051906020019092919050505095508573ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156107ff57600080fd5b505af1158015610813573d6000803e3d6000fd5b505050506040513d602081101561082957600080fd5b810190808051906020019092919050505094508473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b1580156108dc57600080fd5b505af11580156108f0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561091a57600080fd5b81019080805164010000000081111561093257600080fd5b8281019050602081018481111561094857600080fd5b815185600182028301116401000000008211171561096557600080fd5b505092919050505093508473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260078152602001807f747970655f696400000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b158015610a0f57600080fd5b505af1158015610a23573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610a4d57600080fd5b810190808051640100000000811115610a6557600080fd5b82810190506020810184811115610a7b57600080fd5b8151856001820283011164010000000082111715610a9857600080fd5b505092919050505092508473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260078152602001807f636f6e73756d6500000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b158015610b4257600080fd5b505af1158015610b56573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610b8057600080fd5b810190808051640100000000811115610b9857600080fd5b82810190506020810184811115610bae57600080fd5b8151856001820283011164010000000082111715610bcb57600080fd5b505092919050505091508473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f6d61705f69640000000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b158015610c7557600080fd5b505af1158015610c89573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610cb357600080fd5b810190808051640100000000811115610ccb57600080fd5b82810190506020810184811115610ce157600080fd5b8151856001820283011164010000000082111715610cfe57600080fd5b505092919050505090507f12e8cbad44382aa4fe09710922fd7a22cb4fb402c568dee40b7ccaf2f32c82a0848484846040518080602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b83811015610d79578082015181840152602081019050610d5e565b50505050905090810190601f168015610da65780820380516001836020036101000a031916815260200191505b50858103845288818151815260200191508051906020019080838360005b83811015610ddf578082015181840152602081019050610dc4565b50505050905090810190601f168015610e0c5780820380516001836020036101000a031916815260200191505b50858103835287818151815260200191508051906020019080838360005b83811015610e45578082015181840152602081019050610e2a565b50505050905090810190601f168015610e725780820380516001836020036101000a","031916815260200191505b50858103825286818151815260200191508051906020019080838360005b83811015610eab578082015181840152602081019050610e90565b50505050905090810190601f168015610ed85780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a1838383839b509b509b509b5050505050505050509193509193565b6000606060008060606000610f19611726565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f7f57600080fd5b505af1158015610f93573d6000803e3d6000fd5b505050506040513d6020811015610fa957600080fd5b81019080805190602001909291905050509250600080815460010191905081905550610fd6600054611815565b91508273ffffffffffffffffffffffffffffffffffffffff16631a391cb4836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260028152602001807f6964000000000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561109857808201518184015260208101905061107d565b50505050905090810190601f1680156110c55780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156110e557600080fd5b505af11580156110f9573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb48b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6163636f756e7400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156111bd5780820151818401526020810190506111a2565b50505050905090810190601f1680156111ea5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561120a57600080fd5b505af115801561121e573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb48a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f747970655f696400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156112e25780820151818401526020810190506112c7565b50505050905090810190601f16801561130f5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561132f57600080fd5b505af1158015611343573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb4896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f636f6e73756d6500000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156114075780820151818401526020810190506113ec565b50505050905090810190601f1680156114345780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561145457600080fd5b505af1158015611468573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb4886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f6d61705f69640000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561152c578082015181840152602081019050611511565b50505050905090810190601f1680156115595780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561157957600080fd5b505af115801561158d573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16634c6f30c083856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561164c578082015181840152602081019050611631565b50505050905090810190601f1680156116795780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561169957600080fd5b505af11580156116ad573d6000803e3d6000fd5b505050506040513d60208110156116c357600080fd5b810190808051906020019092919050505090507fc0c17dcaa080021797f31c57423b3edcd9335d97a7725da16acf1397d8fea29e816040518082815260200191505060405180910390a18082955095505050505094509492505050565b60005481565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600e8152602001807f636172626f6e5f74726164696e67000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156117d057600080fd5b505af11580156117e4573d6000803e3d6000fd5b505050506040513d60208110156117fa57600080fd5b81019080805190602001909291905050509050809250505090565b60606000806060600080861415611863576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509450611963565b8593505b60008414151561188d578280600101935050600a8481151561188557fe5b049350611867565b826040519080825280601f01601f1916602001820160405280156118c05781602001602082028038833980820191505090505b5091506001830390505b60008614151561195f57600a868115156118e057fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561191b57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681151561195757fe5b0495506118ca565b8194505b505050509190505600a165627a7a72305820d2458f2dce2108c1ec86f5482716c98d1b5f92581757f7618fbea6063693f9930029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getRecrod\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"type_id\",\"type\":\"string\"},{\"name\":\"consume\",\"type\":\"string\"},{\"name\":\"map_id\",\"type\":\"string\"}],\"name\":\"addRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"addRecordResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"type_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"consume\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"map_id\",\"type\":\"string\"}],\"name\":\"GetRecordResult\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETRECROD = "getRecrod";

    public static final String FUNC_ADDRECORD = "addRecord";

    public static final String FUNC_CNT = "cnt";

    public static final Event ADDRECORDRESULT_EVENT = new Event("addRecordResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event GETRECORDRESULT_EVENT = new Event("GetRecordResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected Carbon_trading(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt getRecrod(String id) {
        final Function function = new Function(
                FUNC_GETRECROD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] getRecrod(String id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETRECROD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetRecrod(String id) {
        final Function function = new Function(
                FUNC_GETRECROD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetRecrodInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETRECROD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple4<String, String, String, String> getGetRecrodOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETRECROD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt addRecord(String account, String type_id, String consume, String map_id) {
        final Function function = new Function(
                FUNC_ADDRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(type_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(consume), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(map_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addRecord(String account, String type_id, String consume, String map_id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(type_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(consume), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(map_id)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddRecord(String account, String type_id, String consume, String map_id) {
        final Function function = new Function(
                FUNC_ADDRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(type_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(consume), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(map_id)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, String> getAddRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple2<BigInteger, String> getAddRecordOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public BigInteger cnt() throws ContractException {
        final Function function = new Function(FUNC_CNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List<AddRecordResultEventResponse> getAddRecordResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDRECORDRESULT_EVENT, transactionReceipt);
        ArrayList<AddRecordResultEventResponse> responses = new ArrayList<AddRecordResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddRecordResultEventResponse typedResponse = new AddRecordResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAddRecordResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDRECORDRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAddRecordResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDRECORDRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<GetRecordResultEventResponse> getGetRecordResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GETRECORDRESULT_EVENT, transactionReceipt);
        ArrayList<GetRecordResultEventResponse> responses = new ArrayList<GetRecordResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GetRecordResultEventResponse typedResponse = new GetRecordResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.type_id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.consume = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.map_id = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeGetRecordResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(GETRECORDRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeGetRecordResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(GETRECORDRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Carbon_trading load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Carbon_trading(contractAddress, client, credential);
    }

    public static Carbon_trading deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Carbon_trading.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class AddRecordResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class GetRecordResultEventResponse {
        public TransactionReceipt.Logs log;

        public String account;

        public String type_id;

        public String consume;

        public String map_id;
    }
}
